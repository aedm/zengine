
:name "Alpha blend"
:returns vec4

:param vec4 First "First color"
:param vec4 Second "Second color"
:param float Ratio

:ui Second min=0 max=1 default=0.5 scale=linear
:ui Ratio min=0 max=0 default=0.5 scale=linear

SHADER
{
	return First * Ratio + Second * (1-Ratio);
}

------------------------------------------------------

// For framebuffer rendertargets

:name "World position to framebuffer"
:returns void

:global gGlobalTime
:in vec3 WorldPosition
:option ADD_TIME "Add time"

SHADER
{
	#ifdef ADD_TIME
		gl_FragColor = vec4(inWorldPosition + sin(gTime), 1.0);
	#else 
		gl_FragColor = vec4(inWorldPosition, 1.0);
	#endif
}

compiles to:

uniform float gGlobalTime;

in Data {
	vec3 vWorldPosition;
} Input;

#define inWorldPosition Input.WorldPosition;
#define ADD_TIME
void __shader0
{
	#ifdef ADD_TIME
		gl_FragColor = vec4(inWorldPosition + sin(gTime), 1.0);
	#else 
		gl_FragColor = vec4(inWorldPosition, 1.0);
	#endif
}
#undef ADD_TIME
#undef inWorldPosition

void main()
{
	__shader0();
}

------------------------------------------------------

/// Custom rendertarget

:name "Accumulate albedo"
:returns void

:out vec3 Albedo blend=add

:param vec3 Color

SHADER
{
	outAlbedo = Color;
}


compiles to:

layout (location = 0) out vec3 outAlbedo;

void __shader0(vec3 Color)
{
	outAlbedo = Color;
}

------------------------------------------------------

/// Post-process solid pass

:name "Albedo to color"

:out vec4 Color blend=none
:param vec3 Albedo

SHADER
{
	outColor = vec4(Albedo, 1.0);
}


------------------------------------------------------

/// Texture/function sampling

:name "Sampler"
:returns vec4

:sampler Texture "My Texture"
:param vec2 TexCoord

SHADER
{
	return texture(Texture, TexCoord);
} 


compiles to:

uniform sampler2d __sampler0;

#define Texture __sampler2d
vec4 __shader1(vec2 TexCoord)
{
	return texture(Texture, TexCoord);
}
#undef Texture

------------------------------------------------------

/// Simple float node

uniform float __uniform0;

------------------------------------------------------

/// Full shader example:
:name "Stuff"
:input vec4 Color
:param float Factor
:output vec4 Color

SHADER
{
	outColor = inColor * Factor;
}


full GLSL shader:


in FragInput {
	vec4 Color;
} Input;

layout (location = 0) out vec4 outColor;

uniform float __uniform0;

#define inColor Input.Color
void __shader0(float Factor)
{
	outColor = inColor * Factor;
}
#undef inColor

void main()
{
	__shader(__uniform0);
}
