Shader configuration
//! shader
//!		name=""						UI displayable name of the shader. Default is the file name.
//!		??? output=[sampler]		Output type of shader

Local parameter, mostly UI editable (name starts with uppercase letter)
uniform vec4 Color;
//!		section="" 					Section name to be displayed
//!		ui=string 					Creates new component, defines name to be displayed
//!		min=float 					Minimum value on UI (0)
//!		max=float					Maximum value on UI (1)
//!		def=float 					Default value (0)
//!		scale=[linear,logarithmic]	Scale on UI (linear)

Global parameter (name starts with "g")
uniform mat4x4 gViewSpace;
//!		gViewSpace					Viewspace matrix (mat4x4)
//!		gProjection					Projection matrix (mat4x4)		
//!		gTransformation				Transformation matrix (mat4x4)
//!		gNoisemapSize				Size of noisemap texture (vec2)
//!		gNoisemapSizeRecip			Reciprocal of size of noisemap texture (vec2)
//!		gRenderTargetSize			Size of rendertarget (vec2)
//!		gRenderTargetSizeRecip		Reciprocal of size of rendertarget (vec2)
//!		gViewportSize				Size of viewport (vec2)
//!		gDiffuse					Diffuse color (vec4)
//!		gAmbient					Ambient color (vec4)
//!		gDepthBias					Depth bias value (float)

Inputs as dependency functions (like a texture sampler)
//! input
//! 	name=string  				Dependency function name in shader
//!		input=[float,vec234]		Input value type (default: vec2)
//!		output=[float,vec234,auto]	Output value type (auto defines inherited type "TYPEOF_foo", default: auto)

Compile option, like "#define USE_DEPTH_BIAS"
//! option
//!		ui=string					UI checkbox name
//!		macro=string				Shader macro

Compile choice, like "#define BLEND_SUBTRACTIVE"
//! choice
//!		name=string					Choice name
//!		ui=string					Creates new option, defines UI radiobutton name
//!		macro=string				Shader macro

------------------------------------------------
texture operator shaders:
------------------------------------------------

SomeOperator.fs

/// This defines "vec4 Sampler1(vec2)" and "vec4 Sampler2(vec2)":
//! using name="Sampler1"
//! using name="Sampler2"

uniform float Ratio;
//! ui="Ratio value" type=float min=0 max=1 scale=linear

uniform vec4 Custom0;
//! section="Color"
//! 	ui="Red" 	min=0 	max=1 	default=0.5 	scale=linear
//! 	ui="Green" 	min=0 	max=1 	default=0.5 	scale=linear 
//! 	ui="Blue" 	min=0 	max=1 	default=0.5 	scale=linear 
//! 	ui="Alpha" 	min=0 	max=1 	default=0.5 	scale=linear 

vec4 MAIN (vec2 TexCoord)
{
	return Sampler1(TexCoord) * Ratio + (Sampler2(TexCoord) + Custom0) * (1-Ratio);
}
